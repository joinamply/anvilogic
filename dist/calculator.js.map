{
  "version": 3,
  "sources": ["../calculator.js"],
  "sourcesContent": ["$('.calculator_component').each(function () {\n    // Wharehouse\n    const warehouseSize_XS = 11680;\n    const warehouseSize_S = 23360;\n    const warehouseSize_M = 46720;\n    const warehouseSize_L = 93440;\n    const warehouseSize_XL = 186880;\n    const warehouseSize_2XL = 373760;\n    const warehouseSize_3XL = 747520;\n    const warehouseSize_4XL = 1495040;\n\n    // Compute Loc\n    const computeLoc_us_east = 3;\n    const computeLoc_ap_southEast = 3.7;\n    const computeLoc_eu_central = 3.9;\n\n    // Data Load Service\n    const dataService_snowpipe = 2190;\n    const dataService_snowpipeADJ = 29200;\n\n    // Storage Costs\n    const storageCosts_tb = 288;\n    const compressionRate = 0.9;\n    const managedCost = 0.3;\n\n    // Storage Loc\n    const storageLoc_us_east = 24;\n    const storageLoc_eu_central = 24.5;\n    const storageLoc_ap_southEast = 25;\n\n    // Comparables\n    const gbYear_100 = 100;\n    const gbYear_500 = 500;\n    const gbYear_1024 = 1024;\n    const gbYear_5120 = 5120;\n    const gbYear_10240 = 10240;\n    const gbYear_25600 = 25600;\n    const gbYear_51200 = 51200;\n\n    // Comparables Splunk\n    const splunk_100 = 600;\n    const splunk_500 = 500;\n    const splunk_1024 = 390.63;\n    const splunk_5120 = 366.21;\n    const splunk_10240 = 292.97;\n    const splunk_25600 = 244.14;\n    const splunk_51200 = 195.31;\n\n    // Comparables Splunk Cloud\n    const splunkCloud_100 = 800;\n    const splunkCloud_500 = 710;\n    const splunkCloud_1024 = 683.59;\n    const splunkCloud_5120 = 488.28;\n    const splunkCloud_10240 = 390.63;\n    const splunkCloud_25600 = 341.8;\n    const splunkCloud_51200 = 195.31;\n\n    // Comparables Azure Sentinel\n    const azeureSentinel_100 = 715.4;\n    const azeureSentinel_500 = 631.45;\n    const azeureSentinel_1024 = 620.5;\n    const azeureSentinel_5120 = 587.65;\n    const azeureSentinel_10240 = 550.0;\n    const azeureSentinel_25600 = 510.0;\n    const azeureSentinel_51200 = 470.0;\n\n    // Other Variables\n    const credit_price = 3;\n    const margin = 0.3;\n\n    // Calc Variables\n    let dataIngestion = 0;\n    let dataRetention = 0;\n\n    let storageSize = 0;\n\n    let warehouseSize = 0;\n\n    let credits_dataLoad = 0;\n    let credits_warehouseSize = 0;\n\n    // Display Variables\n    let totalLogging_computeCosts = 0;\n    let totalLogging_storageCosts = 0;\n    let totalLogging_estimatedCosts = 0;\n\n    let comparables_estimatedCosts_splunk = 0;\n    let comparables_estimatedCosts_splunkCloud = 0;\n    let comparables_estimatedCosts_azureSentinel = 0;\n\n    let comparable_savings_splunk = 0;\n    let comparable_savings_splunkCould = 0;\n    let comparable_savings_azureSentinel = 0;\n\n    let totalAnvilogicProfit = 0\n    let totalCutomerEstimate = 0;\n\n    // First run\n    $('#data-ingestion').val(1000);\n    dataIngestion = $('#data-ingestion').val();\n    $('#data-retention').val(365);\n    dataRetention = $('#data-retention').val();\n    checkInput();\n\n    $('#data-ingestion').change(function () {\n        dataIngestion = $(this).val();\n        checkInput();\n    });\n\n    $('#data-retention').change(function () {\n        dataRetention = $(this).val();\n        checkInput();\n    });\n\n    function checkInput() {\n        if (dataIngestion === undefined || dataRetention === undefined) {\n            return;\n        }\n\n        updateWarehouseSize();\n        updateCredits();\n        updateCosts();\n        updateComparables();\n        displayResults();\n    }\n\n    function updateWarehouseSize() {\n        if (dataIngestion <= 2000) {\n            warehouseSize = warehouseSize_XS;\n        } else if (dataIngestion <= 5000) {\n            warehouseSize = warehouseSize_S;\n        } else if (dataIngestion <= 12500) {\n            warehouseSize = warehouseSize_M;\n        } else if (dataIngestion <= 25000) {\n            warehouseSize = warehouseSize_L;\n        } else if (dataIngestion <= 50000) {\n            warehouseSize = warehouseSize_XL;\n        }\n    }\n\n    function updateCredits() {\n        credits_dataLoad = (dataIngestion / 100 / 1.25) * dataService_snowpipe;\n        credits_warehouseSize = warehouseSize;\n        storageSize = ((dataIngestion * dataRetention) / 1024) * (1 - compressionRate);\n    }\n\n    function updateCosts() {\n        // Total Logging Compute Costs\n        totalLogging_computeCosts = credit_price * (credits_warehouseSize + credits_dataLoad);\n\n        // Total Logging Storage Costs\n        if (storageSize * storageCosts_tb < 24) {\n            totalLogging_storageCosts = 24;\n        } else {\n            totalLogging_storageCosts = (storageSize * storageCosts_tb) / 1;\n        }\n\n        // Total Logging Estimated Costs\n        totalLogging_estimatedCosts = totalLogging_computeCosts + totalLogging_storageCosts;\n\n        totalAnvilogicProfit = totalLogging_computeCosts * margin;\n        totalCutomerEstimate = totalLogging_estimatedCosts + totalAnvilogicProfit;\n    }\n\n    function updateComparables() {\n        if (dataIngestion < gbYear_500) {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_100;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_100;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_100;\n        } else if (dataIngestion < gbYear_1024) {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_500;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_500;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_500;\n        } else if (dataIngestion < gbYear_5120) {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_1024;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_1024;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_1024;\n        } else if (dataIngestion < gbYear_10240) {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_5120;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_5120;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_5120;\n        } else if (dataIngestion < gbYear_25600) {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_10240;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_10240;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_10240;\n        } else if (dataIngestion < gbYear_51200) {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_25600;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_25600;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_25600;\n        } else {\n            comparables_estimatedCosts_splunk = dataIngestion * splunk_51200;\n            comparables_estimatedCosts_splunkCloud = dataIngestion * splunkCloud_51200;\n            comparables_estimatedCosts_azureSentinel = dataIngestion * azeureSentinel_51200;\n        }\n\n        // Calculate savings\n        comparable_savings_splunk =\n            (comparables_estimatedCosts_splunk - totalCutomerEstimate) / comparables_estimatedCosts_splunk;\n        comparable_savings_splunkCould =\n            (comparables_estimatedCosts_splunkCloud - totalCutomerEstimate) /\n            comparables_estimatedCosts_splunkCloud;\n        comparable_savings_azureSentinel =\n            (comparables_estimatedCosts_azureSentinel - totalCutomerEstimate) /\n            comparables_estimatedCosts_azureSentinel;\n    }\n\n    function displayResults() {\n        $(\"[total-logging='compute-costs']\").text(formatAsPrice(totalLogging_computeCosts));\n        $(\"[total-logging='storage-costs']\").text(formatAsPrice(totalLogging_storageCosts));\n        $(\"[total-logging='estimated-costs']\").text(formatAsPrice(totalLogging_estimatedCosts));\n\n        $(\"[comparables='splunk']\").text(formatAsPrice(comparables_estimatedCosts_splunk));\n        $(\"[comparables='splunk-cloud']\").text(formatAsPrice(comparables_estimatedCosts_splunkCloud));\n        $(\"[comparables='azure-sentinel']\").text(formatAsPrice(comparables_estimatedCosts_azureSentinel));\n\n        $(\"[savings='splunk']\").text(formatAsPercentage(comparable_savings_splunk));\n        $(\"[savings='splunk-cloud']\").text(formatAsPercentage(comparable_savings_splunkCould));\n        $(\"[savings='azure-sentinel']\").text(formatAsPercentage(comparable_savings_azureSentinel));\n    }\n\n    function formatAsPrice(num) {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            maximumFractionDigits: 0,\n        }).format(num);\n    }\n\n    function formatAsPercentage(num) {\n        return new Intl.NumberFormat('default', {\n            style: 'percent',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format(num);\n    }\n});"],
  "mappings": "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",
  "names": ["dataIngestion", "dataRetention", "storageSize", "warehouseSize", "credits_dataLoad", "credits_warehouseSize", "totalLogging_computeCosts", "totalLogging_storageCosts", "totalLogging_estimatedCosts", "comparables_estimatedCosts_splunk", "comparables_estimatedCosts_splunkCloud", "comparables_estimatedCosts_azureSentinel", "comparable_savings_splunk", "comparable_savings_splunkCould", "comparable_savings_azureSentinel", "totalAnvilogicProfit", "totalCutomerEstimate", "checkInput", "updateWarehouseSize", "updateCredits", "updateCosts", "updateComparables", "displayResults", "formatAsPrice", "formatAsPercentage", "num"]
}
